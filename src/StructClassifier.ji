using Base.Threads
include("ModifiedCoord_Descent.ji")
function strucRec(model, testData, ∇ = 1, tau = 0, n_mcd = 64)
    n, p = size(model.trainData.X)
    if tau == 0
        nstep = 12
        Tau = (1:nstep)  .* 4
    else
        nstep = 3
        Tau = [0.8, 1.0, 1.2] .*tau
    end

    Lambda = ones(nstep, p) .* Tau ./p
    sae(l) = additiveQR.SAE(model, testData, l, ∇)
    
    @threads for k in 1:nstep
        Lambda[k, :] = Modified_CoorDescent.MCD_optim(model, sae, Lambda[k, :], ∇, n_mcd)
    end

    sae_lambda = zeros(nstep)

    for k in 1:nstep
        sae_lambda[k] = sae(Lambda[k, :])
    end
    lk = argmin(sae_lambda)
    lambda = Lambda[lk, :]

    
    # filename = string("results_$∇", ".mat")
    # matwrite(filename, Dict("lambda" => lambda, "index" => ind))
    
    res = Dict( 
                "path" => Lambda,
                "lambda" => lambda,
    )
end