module additiveQR
include("supportFuncs.ji")
include("DGP.ji")
using BasicBSpline

struct bsplElems
    pBasis::Int
    nBasis::Int
    knot::Array{Float64, 1}
    function bsplElems(nBasis::Int, pBasis::Int)
        knot = LinRange(-2, 2, pBasis + nBasis + 1)
        new(pBasis, nBasis, knot)
    end

    function bsplElems(knot::Array{Float64, 1}, pBasis::Int)
        nBasis = length(knot) - pBasis - 1
        new(pBasis, nBasis, knot)
    end
end

function assemblePx(X, p)
    n, d = size(X)
    Ak = []
    for k in 1:d
        ak = p.(X[:,k])
        ak = hcat(ak...)
        push!(Ak, ak')
    end
    A = hcat(Ak...)
    return A , Ak
end

struct twoStageAddQR
    basisElems::bsplElems
    pfuncs
    Mx::Array{Float64, 2}
    coef::Array{Float64, 1}
    qbic::Float64
    trainData::data
    intercept::Float64
    y_min::Float64
    y_max::Float64
    tau::Float64
    function twoStageAddQR(splElems::bsplElems, trainData::data, tau::Float64, u::Bool=false)
        ρ(x) = rho(x, tau)
        nBasis = splElems.nBasis
        pBasis = splElems.pBasis
        knots = KnotVector(splElems.knot)
        bsp = BSplineSpace{pBasis}(knots)
        pfuncs(t) = [bsplinebasis(bsp,i,t) for i in 1:BasicBSpline.dim(bsp)]
        n, d = size(trainData.X)
        A, Ak = assemblePx(trainData.X, pfuncs)
        if u
            Intercept = ones(n, 1)
            θ_0 = rand(d*nBasis + 1)
            A = hcat(Intercept, A)
            func(θ) = sum(ρ.(trainData.y - A*θ))./n
            res = optimfunc(func, θ_0)
            # QBIC: determined by basis parameters
            qbic = n*log(n*res.minimum) + 2log(n)*nBasis
            coef = res.minimizer[2:end]
            intercept = res.minimizer[1]
        else
            θ_0 = rand(d*nBasis)
            func_(θ) = sum(ρ.(trainData.y - A*θ))./n
            res = optimfunc(func_, θ_0)
            # QBIC: determined by basis parameters
            qbic = n*log(n*res.minimum) + 2log(n)*nBasis
            coef = res.minimizer   
            intercept = 0      
        end
        M = zeros(n, d)
        coefm = reshape(coef, nBasis, d)
        for k in 1:d
            M[:,k] = Ak[k] * coefm[:,k]
        end
        y_min = minimum(trainData.y) 
        y_max = maximum(trainData.y)
        new(splElems, pfuncs, M, coef, qbic, trainData, intercept, y_min, y_max, tau)
    end

end

function predictor(model::twoStageAddQR, Xt::Array{Float64, 2})
    # println("Predicting via model on stage 1... \n")
    A, = assemblePx(Xt, model.pfuncs)
    A*model.coef .+ model.intercept
end

function predictor(model::twoStageAddQR, xi::Float64, λi::Float64, i::Int, ∇ = 2)
    # println("Predicting vector xn via model on stage 2... \n")
    X = model.trainData.X
    y = model.trainData.y
    tau = model.tau
    ρ(x) = rho(x, tau)
    n, = size(X)
    msum = sum(model.Mx, dims=2)
    u = model.intercept
    yi = 0
    h = 1/λi
    Xi = xi .- X[:, i] 
    Wi = ker(Xi, h)
    if ∇ == 2
        b0 = zeros(2)
        f_d2(b::Array{Float64, 1}) = sum(ρ.((y .- u .- b[1] .- b[2].*Wi)
                                        .- (msum .- model.Mx[:,i])) .* Wi)./(n*h)
        res = optimfunc(f_d2, b0)
        yi = res.minimizer[1]
    
    elseif ∇ == 1
        f_d1(b) = sum(ρ.((y .- u .- b) .- (msum .- model.Mx[:,i])) .* Wi)./(n*h)
        r = model.y_min
        l = model.y_max
        yi = bisec_search(f_d1, r, l)

    elseif ∇ == 3
        b0 = zeros(3)    
        f_d3(b::Array{Float64, 1}) = sum(ρ.((y .- u .- b[1] .- b[2].*Wi .- b[3].*(Wi).^2)
                                        .- (msum .- model.Mx[:,i])) .* Wi)./(n*h)
        res = optimfunc(f_d3, b0)
        yi = res.minimizer[1]
    end
    yi
end

####
# Parallel on d
function predictor(model::twoStageAddQR, Xi::Array{Float64, 1}, λi::Float64, i::Int, ∇)
    # println("Predicting vector xn via model on stage 2... \n")
    X = model.trainData.X
    n = length(Xi)
    yi = zeros(n)
    for k in 1:n
        xi = Xi[k]
        yi[k] = predictor(model, xi, λi, i, ∇)
    end
    yi
end

# Parallel on n
function predictor(model::twoStageAddQR, Xn::Array{Float64, 1}, λ::Array{Float64, 1}, ∇)
    # println("Predicting vector xn via model on stage 2... \n")
    # X = model.trainData.X
    d = length(Xn)
    yn = 0
    for k in 1:d
        xk = Xn[k]
        yn += predictor(model, xk, λ[k], k, ∇)
    end
    yn
end

function predictor(model::twoStageAddQR, Xt::Array{Float64, 2}, λ::Array{Float64, 1}, ∇ = 2) # 之前是对d并行，最多只有d个线程，这里改成对n并F行
    # println("Predicting matrix Xt via model on stage 2... \n")
    n, d = size(Xt)
    u = model.intercept
    y = ones(n).*u
    parallel = 0
    if parallel == 'n'
        @threads for i in 1:n
            y[i] = predictor(model, Xt[i, :], λ, ∇)
        end

    elseif parallel == 'd'
        @threads for i in 1:d
            yi = predictor(model, Xt[:, i], λ[i], i, ∇)
            y += yi
        end

    else
        for i in 1:n
            y[i] = predictor(model, Xt[i, :], λ, ∇)
        end
    end


    y
    
end

SAE(model::twoStageAddQR, λ::Array{Float64, 1}, ∇) = sum(rho.(model.trainData.y - predictor(model, model.trainData.X, λ, ∇), model.tau))

SAE(model::twoStageAddQR, λ::Array{Float64, 1}, X::Array{Float64, 2}, y::Array{Float64, 1}, ∇) = sum(rho.(y - predictor(model, X, λ, ∇), model.tau))

end # end module
# @Threads.threads 
# tasks = Vector{Task}(undef, d)

    # for i in 1:d
    #     tasks[i] = @spawn func(i)
    # end
    # for i in 1:d
    #     try tasks[i]
    #     catch e
    #         if isa(e, UndefRefError)
    #             continue
    #         else
    #             wait(task[i])
    #         end
    #     end
    # end
    # while count != d
    #     sleep(0.1)
    # end
    # wait(tasks[d])
