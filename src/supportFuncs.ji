using LinearAlgebra, Optim, Distributions
using QuantReg, GLM, DataFrames
import Base.Threads.@spawn, Base.Threads.@threads

function QBIC(pbs, nSamples)
    minkn = pbs + 1
    println("Sample size is $nSamples \n")
    trainData = additiveQR.data_set3d(nSamples)
    for kn in minkn:minkn + 3
        elem = additiveQR.bsplElems(pbs, kn)
        model1 = additiveQR.model(elem, trainData, 0.5)
        println("QBIC(nBasis = $kn, pBasis = $pbs) is $(model1.qbic) \n")
    end
end


function bisec_search(f, r, l, tol = 1e-4)
    # this search is based on f has a global optimizer
        delta = l - r
        yi = 0
        while delta > tol
            b_ = LinRange(r, l, 3)
            y_ = f.(b_)
            ind = argmin(y_)
            yi = b_[ind]
            if ind == 1
                r = b_[1]
                l = b_[2]
            end
            
            if ind == 3
                r = b_[2]
                l = b_[3]
            end
            
            if ind == 2
                if y_[1] < y_[3]
                    r = b_[1]
                    l = b_[2]
                else
                    r = b_[2]
                    l = b_[3]
                end
            end
            delta = l - r
        end
        yi
    end


function Base.:-(X::Matrix, xi::Vector)
    n, p = size(X)
    if length(xi) == p
        Xi = repeat(xi|>transpose, n, 1)
    elseif length(xi) == n
        Xi = repeat(xi, 1, p)
    else
        println("the length of xi are not n or p")
    end    
    _Xi = X - Xi
    _Xi
end
    
distribution_ker = Normal(0, 1)
    
function epker(x)
    i = abs(x) <= 1
    return 0.75 * (1 - x^2) * i
end
function gsker(x)
    pdf(distribution_ker, x)
    # exp(- x^2 / 2)
end

function ker(x)
    gsker(x)
end

function ker(x::Vector, h::Float64)
    ker.(x/h)/h
end

function ker(x::Vector, h::Vector)
    d = length(x)
    v = 1
    for i in 1:d 
        v *= ker(x[i]/h[i])/h[i]
    end
    v
end

function ker(X::Matrix, h::Vector)
    n, p = size(X)
    v = zeros(n)
    for i in 1:n
        v[i] = ker(X[i, :], h)
    end
    v
end

rho(x, α::Float64) = abs(x) + (2α - 1)x


function rho_eps(r, a, e)
    res = rho(r, a) + e/2 * log(e + abs(r))
    res
end
    

function optimfunc(f, init_value, tols = 1e-4)
    res = optimize(f, init_value, method=BFGS(), f_tol=tols)
    return res
end